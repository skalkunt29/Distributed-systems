# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import seller_pb2 as seller__pb2


class SellerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_seller = channel.unary_unary(
                '/Seller/create_seller',
                request_serializer=seller__pb2.SellerUser.SerializeToString,
                response_deserializer=seller__pb2.SellerResponse.FromString,
                )
        self.login_seller = channel.unary_unary(
                '/Seller/login_seller',
                request_serializer=seller__pb2.SellerUser.SerializeToString,
                response_deserializer=seller__pb2.SellerResponse.FromString,
                )
        self.logout_seller = channel.unary_unary(
                '/Seller/logout_seller',
                request_serializer=seller__pb2.SellerUser.SerializeToString,
                response_deserializer=seller__pb2.SellerResponse.FromString,
                )
        self.get_seller_rating = channel.unary_unary(
                '/Seller/get_seller_rating',
                request_serializer=seller__pb2.SellerUser.SerializeToString,
                response_deserializer=seller__pb2.SellerRating.FromString,
                )
        self.check_seller_login_status = channel.unary_unary(
                '/Seller/check_seller_login_status',
                request_serializer=seller__pb2.SellerUser.SerializeToString,
                response_deserializer=seller__pb2.SellerResponse.FromString,
                )
        self.add_item = channel.unary_unary(
                '/Seller/add_item',
                request_serializer=seller__pb2.SellerQuery.SerializeToString,
                response_deserializer=seller__pb2.SellerResponse.FromString,
                )
        self.remove_item = channel.unary_unary(
                '/Seller/remove_item',
                request_serializer=seller__pb2.SellerQuery.SerializeToString,
                response_deserializer=seller__pb2.SellerResponse.FromString,
                )
        self.change_price = channel.unary_unary(
                '/Seller/change_price',
                request_serializer=seller__pb2.SellerQuery.SerializeToString,
                response_deserializer=seller__pb2.SellerResponse.FromString,
                )
        self.all_items_by_seller = channel.unary_unary(
                '/Seller/all_items_by_seller',
                request_serializer=seller__pb2.SellerUser.SerializeToString,
                response_deserializer=seller__pb2.SellerItemResponse.FromString,
                )


class SellerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create_seller(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def login_seller(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logout_seller(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_seller_rating(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_seller_login_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_item(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_item(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def change_price(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def all_items_by_seller(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SellerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_seller': grpc.unary_unary_rpc_method_handler(
                    servicer.create_seller,
                    request_deserializer=seller__pb2.SellerUser.FromString,
                    response_serializer=seller__pb2.SellerResponse.SerializeToString,
            ),
            'login_seller': grpc.unary_unary_rpc_method_handler(
                    servicer.login_seller,
                    request_deserializer=seller__pb2.SellerUser.FromString,
                    response_serializer=seller__pb2.SellerResponse.SerializeToString,
            ),
            'logout_seller': grpc.unary_unary_rpc_method_handler(
                    servicer.logout_seller,
                    request_deserializer=seller__pb2.SellerUser.FromString,
                    response_serializer=seller__pb2.SellerResponse.SerializeToString,
            ),
            'get_seller_rating': grpc.unary_unary_rpc_method_handler(
                    servicer.get_seller_rating,
                    request_deserializer=seller__pb2.SellerUser.FromString,
                    response_serializer=seller__pb2.SellerRating.SerializeToString,
            ),
            'check_seller_login_status': grpc.unary_unary_rpc_method_handler(
                    servicer.check_seller_login_status,
                    request_deserializer=seller__pb2.SellerUser.FromString,
                    response_serializer=seller__pb2.SellerResponse.SerializeToString,
            ),
            'add_item': grpc.unary_unary_rpc_method_handler(
                    servicer.add_item,
                    request_deserializer=seller__pb2.SellerQuery.FromString,
                    response_serializer=seller__pb2.SellerResponse.SerializeToString,
            ),
            'remove_item': grpc.unary_unary_rpc_method_handler(
                    servicer.remove_item,
                    request_deserializer=seller__pb2.SellerQuery.FromString,
                    response_serializer=seller__pb2.SellerResponse.SerializeToString,
            ),
            'change_price': grpc.unary_unary_rpc_method_handler(
                    servicer.change_price,
                    request_deserializer=seller__pb2.SellerQuery.FromString,
                    response_serializer=seller__pb2.SellerResponse.SerializeToString,
            ),
            'all_items_by_seller': grpc.unary_unary_rpc_method_handler(
                    servicer.all_items_by_seller,
                    request_deserializer=seller__pb2.SellerUser.FromString,
                    response_serializer=seller__pb2.SellerItemResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Seller', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Seller(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create_seller(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Seller/create_seller',
            seller__pb2.SellerUser.SerializeToString,
            seller__pb2.SellerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def login_seller(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Seller/login_seller',
            seller__pb2.SellerUser.SerializeToString,
            seller__pb2.SellerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def logout_seller(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Seller/logout_seller',
            seller__pb2.SellerUser.SerializeToString,
            seller__pb2.SellerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_seller_rating(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Seller/get_seller_rating',
            seller__pb2.SellerUser.SerializeToString,
            seller__pb2.SellerRating.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_seller_login_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Seller/check_seller_login_status',
            seller__pb2.SellerUser.SerializeToString,
            seller__pb2.SellerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_item(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Seller/add_item',
            seller__pb2.SellerQuery.SerializeToString,
            seller__pb2.SellerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_item(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Seller/remove_item',
            seller__pb2.SellerQuery.SerializeToString,
            seller__pb2.SellerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def change_price(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Seller/change_price',
            seller__pb2.SellerQuery.SerializeToString,
            seller__pb2.SellerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def all_items_by_seller(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Seller/all_items_by_seller',
            seller__pb2.SellerUser.SerializeToString,
            seller__pb2.SellerItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
